// Code generated by protoc-gen-go. DO NOT EDIT.
// source: heartbeat.proto

package heartbeat

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SendMsg struct {
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendMsg) Reset()         { *m = SendMsg{} }
func (m *SendMsg) String() string { return proto.CompactTextString(m) }
func (*SendMsg) ProtoMessage()    {}
func (*SendMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c667767fb9826a9, []int{0}
}

func (m *SendMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendMsg.Unmarshal(m, b)
}
func (m *SendMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendMsg.Marshal(b, m, deterministic)
}
func (m *SendMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMsg.Merge(m, src)
}
func (m *SendMsg) XXX_Size() int {
	return xxx_messageInfo_SendMsg.Size(m)
}
func (m *SendMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SendMsg proto.InternalMessageInfo

func (m *SendMsg) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SendMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type ReceiveMsg struct {
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReceiveMsg) Reset()         { *m = ReceiveMsg{} }
func (m *ReceiveMsg) String() string { return proto.CompactTextString(m) }
func (*ReceiveMsg) ProtoMessage()    {}
func (*ReceiveMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c667767fb9826a9, []int{1}
}

func (m *ReceiveMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceiveMsg.Unmarshal(m, b)
}
func (m *ReceiveMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceiveMsg.Marshal(b, m, deterministic)
}
func (m *ReceiveMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveMsg.Merge(m, src)
}
func (m *ReceiveMsg) XXX_Size() int {
	return xxx_messageInfo_ReceiveMsg.Size(m)
}
func (m *ReceiveMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveMsg proto.InternalMessageInfo

func (m *ReceiveMsg) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ReceiveMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*SendMsg)(nil), "SendMsg")
	proto.RegisterType((*ReceiveMsg)(nil), "ReceiveMsg")
}

func init() { proto.RegisterFile("heartbeat.proto", fileDescriptor_3c667767fb9826a9) }

var fileDescriptor_3c667767fb9826a9 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x48, 0x4d, 0x2c,
	0x2a, 0x49, 0x4a, 0x4d, 0x2c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xb2, 0xe4, 0x62, 0x0f,
	0x4e, 0xcd, 0x4b, 0xf1, 0x2d, 0x4e, 0x17, 0x92, 0xe1, 0xe2, 0x2c, 0xc9, 0xcc, 0x4d, 0x2d, 0x2e,
	0x49, 0xcc, 0x2d, 0x90, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x42, 0x08, 0x08, 0x09, 0x70, 0x31,
	0xe7, 0x16, 0xa7, 0x4b, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x98, 0x4a, 0x36, 0x5c, 0x5c,
	0x41, 0xa9, 0xc9, 0xa9, 0x99, 0x65, 0xa9, 0x64, 0xe8, 0x36, 0x32, 0xe6, 0xe2, 0xf4, 0x00, 0xb9,
	0xc5, 0x29, 0x35, 0xb1, 0x44, 0x48, 0x8d, 0x8b, 0x3d, 0xa0, 0x34, 0x29, 0x27, 0xb3, 0x38, 0x43,
	0x88, 0x43, 0x0f, 0xea, 0x1e, 0x29, 0x6e, 0x3d, 0x84, 0xf1, 0x4a, 0x0c, 0x1a, 0x8c, 0x06, 0x8c,
	0x49, 0x6c, 0x60, 0x47, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe9, 0xf4, 0xa6, 0xfa, 0xc7,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HeartBeatClient is the client API for HeartBeat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HeartBeatClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (HeartBeat_PublishClient, error)
}

type heartBeatClient struct {
	cc *grpc.ClientConn
}

func NewHeartBeatClient(cc *grpc.ClientConn) HeartBeatClient {
	return &heartBeatClient{cc}
}

func (c *heartBeatClient) Publish(ctx context.Context, opts ...grpc.CallOption) (HeartBeat_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HeartBeat_serviceDesc.Streams[0], "/HeartBeat/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &heartBeatPublishClient{stream}
	return x, nil
}

type HeartBeat_PublishClient interface {
	Send(*SendMsg) error
	Recv() (*ReceiveMsg, error)
	grpc.ClientStream
}

type heartBeatPublishClient struct {
	grpc.ClientStream
}

func (x *heartBeatPublishClient) Send(m *SendMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *heartBeatPublishClient) Recv() (*ReceiveMsg, error) {
	m := new(ReceiveMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HeartBeatServer is the server API for HeartBeat service.
type HeartBeatServer interface {
	Publish(HeartBeat_PublishServer) error
}

func RegisterHeartBeatServer(s *grpc.Server, srv HeartBeatServer) {
	s.RegisterService(&_HeartBeat_serviceDesc, srv)
}

func _HeartBeat_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HeartBeatServer).Publish(&heartBeatPublishServer{stream})
}

type HeartBeat_PublishServer interface {
	Send(*ReceiveMsg) error
	Recv() (*SendMsg, error)
	grpc.ServerStream
}

type heartBeatPublishServer struct {
	grpc.ServerStream
}

func (x *heartBeatPublishServer) Send(m *ReceiveMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *heartBeatPublishServer) Recv() (*SendMsg, error) {
	m := new(SendMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HeartBeat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "HeartBeat",
	HandlerType: (*HeartBeatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _HeartBeat_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "heartbeat.proto",
}
